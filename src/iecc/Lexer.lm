/*******************************************************************************
* Project: IECC (IEC 61131-3 Languages Compiler for Arduino).                  *
* Authors: Paulo H. Torrens <paulotorrens AT gnu DOT org>.                     *
* License: GNU GPLv3+.                                                         *
*                                                                              *
* Language: Flex -> (Modern) Objective-C.                                      *
* Description: Compiler lexer file.                                            *
********************************************************************************
* Copyright (C) 2015 - Paulo H. Torrens. All rights reserved.                  *
*                                                                              *
* This program is free software: you can redistribute it and/or modify it      *
* under the terms of the GNU General Public License as published by the Free   *
* Software Foundation, either version 3 of the License, or (at your option)    *
* any later version.                                                           *
*                                                                              *
* This program is distributed in the hope that it will be useful, but WITHOUT  *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        *
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for     *
* more details.                                                                *
*                                                                              *
* You should have received a copy of the GNU General Public License along with *
* this program. If not, see <http://www.gnu.org/licenses/>.                    *
*******************************************************************************/
/* Small header */
%{
  // Header made by Bison:
  #import "./Parser.tmp.h"
  
  //
  #define YY_USER_ACTION { \
    yylloc.first_line = yylloc.last_line = yylineno; \
    yylloc.first_column = yycolumn; \
    yycolumn += yyleng; \
    yylloc.last_column = yycolumn; \
  }
  
  //
  #define PUSH for(int i = 0; !i; i = (yy_push_state(i), 1)) i =
  #define POP yy_pop_state()
  
  //
  int yycolumn = 1;
%}

/* Options */
%option 7bit
%option stack
%option noyywrap
%option yylineno
%option case-insensitive

/* Constants, taken from several places */
letter              [A-Z]
digit               [0-9]
bit                 [01]
octal_digit         [0-7]
hex_digit           [0-9A-F]
gibberish           [A-Z0-9_#]+

/* Identifier, taken from table 2 of the standard */
identifier          (_?{letter}(_?({letter}|{digit}))*)

/* Numeric literal, taken from table 5 of the standard */
int_literal         (({int_type_name}"#")?{any_int})
int_type_name       (U?[SDL]?INT)
any_int             ({signed_int}|{binary_int}|{octal_int}|{hex_int})
unsigned_int        ({digit}(_?{digit})*)
signed_int          ([+-]?{unsigned_int})
binary_int          ("2#"(_?{bit})+)
octal_int           ("8#"(_?{octal_digit})+)
hex_int             ("16#"(_?{hex_digit})+)
real_literal        (({real_type_name}"#")?{signed_int}"."{fraction})
real_type_name      (L?REAL)
fraction            ({unsigned_int}("E"{signed_int})?)

/* */
%s COMMENT_SLASH
%s COMMENT_PAREN

/******************************************************************************/
%%
[\r]?[\n]                               yycolumn = 1;
[ \t]+                                  (void)0;

<COMMENT_SLASH>{
  /* We are inside a "/*" comment block
     which means we can nest it. */
  "/*"                                  PUSH COMMENT_SLASH;
  
  "*/"                                  POP;
  
  .                                     (void)0;
}

<COMMENT_PAREN>{
  /* We are inside a "(*" comment block
     which means we can nest it. */
  "(*"                                  PUSH COMMENT_PAREN;
  
  "*)"                                  POP;
  
  .                                     (void)0;
}

<INITIAL>{  
  /* Comments, taken from table 3 of
     the standard */
  "/*"                                  PUSH COMMENT_SLASH;
  "(*"                                  PUSH COMMENT_PAREN;
  
  /* Identifier, taken from table 2 of
     the standard */
  {identifier}                          {
                                          // TODO
                                          return TOK_IDENTIFIER;
                                        };
  
  {identifier}{gibberish}               {
                                          // TODO
                                          return TOK_INVALID;
                                        };
  
  /* Numeric literals, taken from table
     5 of the standard */
  {int_literal}                         {
                                          // TODO
                                          return TOK_INT_LITERAL;
                                        };
  
  {int_literal}{gibberish}              {
                                          // TODO
                                          return TOK_INVALID;
                                        };
  
  {real_literal}                        {
                                          // TODO
                                          return TOK_REAL_LITERAL;
                                        };
  
  {real_literal}{gibberish}             {
                                          // TODO
                                          return TOK_INVALID;
                                        };
  
  /* Pragmas, taken from table 4 of the
     standard */
  \{[^}]*\}                             {
                                          // TODO
                                          return TOK_PRAGMA;
                                        };

}

.                                       {
                                          // TODO: warn about unknown char
                                        };
