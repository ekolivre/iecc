/*******************************************************************************
* Project: IECC (IEC 61131-3 Languages Compiler for Arduino).                  *
* Authors: Paulo H. Torrens <paulotorrens AT gnu DOT org>.                     *
* License: GNU GPLv3+.                                                         *
*                                                                              *
* Language: Bison -> (Modern) Objective-C.                                     *
* Description: Compiler parser file.                                           *
********************************************************************************
* Copyright (C) 2015 - Paulo H. Torrens. All rights reserved.                  *
*                                                                              *
* This program is free software: you can redistribute it and/or modify it      *
* under the terms of the GNU General Public License as published by the Free   *
* Software Foundation, either version 3 of the License, or (at your option)    *
* any later version.                                                           *
*                                                                              *
* This program is distributed in the hope that it will be useful, but WITHOUT  *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        *
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for     *
* more details.                                                                *
*                                                                              *
* You should have received a copy of the GNU General Public License along with *
* this program. If not, see <http://www.gnu.org/licenses/>.                    *
*******************************************************************************/
%{
  //
  #import <stdlib.h>
  #import <stdio.h>
  
  //
  extern int yylex(void);
  
  //
  void yyerror(char const *str) {
    /* TODO */
  };
%}

%locations
%token-table
%error-verbose

/* Helper */
%token TOK_INVALID

/* Table 2 */
%token TOK_IDENTIFIER

/* Table 4 */
%token TOK_PRAGMA

/* Table 5 */
%token TOK_INT_LITERAL
%token TOK_REAL_LITERAL
%token TOK_BIT_STR_LITERAL
%token TOK_BOOL_LITERAL

/* Table 6 */
%token TOK_CHAR_LITERAL

/* Tables 8 and 9 */
%token TOK_TIME_LITERAL;

/* Table 10 */
%token TOK_SINT
%token TOK_INT
%token TOK_DINT
%token TOK_LINT
%token TOK_USINT
%token TOK_UINT
%token TOK_UDINT
%token TOK_ULINT
%token TOK_REAL
%token TOK_LREAL
%token TOK_BOOL
%token TOK_BYTE
%token TOK_WORD
%token TOK_DWORD
%token TOK_LWORD
%token TOK_STRING
%token TOK_WSTRING
%token TOK_CHAR
%token TOK_WCHAR
%token TOK_DATE
%token TOK_LDATE
%token TOK_TIME
%token TOK_LTIME

%%
translation_unit: ;

/* Identifier, taken from table 2 of the standard */
identifier: TOK_IDENTIFIER;

/* Numeric literals, taken from table 5 of the standard */
constant: numeric_literal
        | char_literal
        | time_literal
        | bit_str_literal
        | bool_literal;

numeric_literal: int_literal
               | real_literal;

int_literal: TOK_INT_LITERAL;
real_literal: TOK_REAL_LITERAL;
bit_str_literal: TOK_BIT_STR_LITERAL;
bool_literal: TOK_BOOL_LITERAL;

/* Character string literals, taken from table 6 of the standard */
char_literal: TOK_CHAR_LITERAL;

/* Duration, data and time of day literals, taken from tables 8 and 9 of... */
time_literal: TOK_TIME_LITERAL;

/* Elementary data types, taken from table 10 of the standard */
data_type_access: elem_type_name
                | derived_type_access;

elem_type_name: numeric_type_name
              | bit_str_type_name
              | string_type_name
              | date_type_name
              | time_type_name;

numeric_type_name: int_type_name
                 | real_type_name;

int_type_name: sign_int_type_name
             | unsign_int_type_name;

sign_int_type_name: TOK_SINT
                  | TOK_INT
                  | TOK_DINT
                  | TOK_LINT;

unsign_int_type_name: TOK_USINT
                    | TOK_UINT
                    | TOK_UDINT
                    | TOK_ULINT;

real_type_name: TOK_REAL
              | TOK_LREAL;

bit_str_type_name: TOK_BOOL
                 | TOK_BYTE
                 | TOK_WORD
                 | TOK_DWORD
                 | TOK_LWORD;

string_type_name: TOK_STRING string_size
                | TOK_WSTRING string_size
                | TOK_CHAR
                | TOK_WCHAR;

string_size: /* TODO */;

date_type_name: TOK_DATE
              | TOK_LDATE;

time_type_name: TOK_TIME
              | TOK_LTIME;








derived_type_access: ;


%%

int main() {
  int x;
  extern int yyleng;
  extern int yylineno;
  extern int yycolumn;
  extern char *yytext;
  
  do {
    x = yylex();
    printf("%d:%02d-%02d:", yylineno, yycolumn, yycolumn + x ? yyleng : 0);
    if(x >= 0x80) {
      printf("%-20s %s", yytname[x - 255], yytext);
    } else {
      if(x) {
        printf("'%c'", x);
      } else {
        printf("EOF");
      };
    };
    printf("\n");
  } while(x);
  
  return EXIT_SUCCESS;
};
